# (c) 2019 Alexey Ovchinnikov
#
# This is an illustrative work intended for demonstration purposes only.
# Any other use is discouraged.
#
# This work is licensed under a Creative Commons
# Attribution-NonCommercial-NoDerivatives 4.0 International License.
# For full license agreement please see:
# http://creativecommons.org/licenses/by-nc-nd/4.0/

import abc
import datetime


# TODO: consider splitting alarming and non-alarming base classes when more
# data on Collectors is accumulated.
class BaseCollector(object):

    """ Base class for collectors."""

    __metaclass__ = abc.ABCMeta

    def __init__(self, config):
        super(BaseCollector, self).__init__()
        if not config.has_section(self.config_section):
            self.config_section = 'DEFAULT'
        self.statsize = config.getint(self.config_section,
                                      'statistics_interval')
        # TODO: make this a list of callbacks, one might want to add an email
        # sender or something similar.
        self.alarm_callback = lambda *x, **k: True

    def tick(self):
        """ Handler for clock signal.

        Ticks are generated by the main program by default once in a second.
        Each tick signals that yet another statistics collection sub-interval
        is over. It is up to specific implementation of Collector to decide
        what to do with this knowledge. Note, that this is not an abstract
        method since the most basic operation for a collector is to ignore
        clock pulse altogether, however strange it might look at first place.
        (Compare to get_stats() which have to return something specific to a
        particular Collector).
        """
        return

    def alarm(self):
        """ Place for alarm-specific logic.

        In case a collector must generate an alarm because of some recognized
        patterns this is the place to define necessary logic.
        """
        return

    def set_alarm_callback(self, callback):
        """ Adds an external function to be called on alarm.

        Alarm callback function is supposed to be called during an alarm and
        provide some means to communicate alarm details to the users
        immediately after detection.
        """
        self.alarm_callback = callback

    @abc.abstractmethod
    def process_line(self, line):
        """ Log line processing happens here.

        This code is supposed to get called with each line from log file.
        Line processing logic should go here. This method effectively defines
        a specific Collector and thus must be implemented explicitly.
        """

    @abc.abstractmethod
    def get_stats(self):
        """ Provides statistics representation for displaying.

        The method is specific to a particular Collector and thus must be
        explicitly defined.
        """
